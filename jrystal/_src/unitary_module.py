"""
Unitary matrix module.

This module provides functions for generating and working with unitary matrices.
A unitary matrix is a complex square matrix whose conjugate transpose is equal to its inverse.
For real matrices, this reduces to an orthogonal matrix where the transpose equals the inverse.
"""
import jax
import jax.numpy as jnp
from jaxtyping import Array
from typing import Dict, Union, List


def unitary_matrix(params: Dict[str, Array], complex: bool = False) -> Array:
  """Generate a unitary (or orthogonal) matrix from its parameters.

  This function constructs a unitary matrix (or orthogonal matrix in the real case) using the QR decomposition method. The resulting matrix will have orthogonal columns and determinant ±1.
  
  Example:
  
  .. code-block:: python
  
      key = jax.random.PRNGKey(0)

      # Generate a 3x3 complex unitary matrix
      params = unitary_matrix_param_init(key, (3, 3), complex=True)
      U = unitary_matrix(params, complex=True)

      # Verify unitarity: U†U should be close to identity
      jnp.allclose(U.conj().T @ U, jnp.eye(3))

  Args:
    params(Dict[str, Array]): Dictionary containing the matrix parameters with keys:
    
      - 'w_re': Real part of the weight matrix
      - 'w_im': Imaginary part of the weight matrix (used if complex=True)
  
      params can be generated by :func:`unitary_matrix_param_init`.
    complex(bool): If True, generates a complex unitary matrix. If False, generates a real orthogonal matrix. Defaults to False.

  Returns:
      Array: A unitary matrix U where :math:`U^\dagger U = UU^\dagger = I` (complex case) or an orthogonal matrix O where :math:`O^T O = O O^T = I` (real case).


  """
  weight_real = params['w_re']
  if complex:
    weight_imaginary = 1.j * params['w_im']
  else:
    weight_imaginary = 0.

  weight = weight_real + weight_imaginary
  orthogonal_columns = jnp.linalg.qr(weight, mode='reduced')[0]
  return orthogonal_columns


def unitary_matrix_param_init(key: Array, shape: Union[tuple, List[int]], complex: bool = True) -> Dict[str, Array]:
  """Initialize parameters for generating a unitary matrix.

  This function creates the necessary parameters to construct a unitary matrix
  of the specified shape. It initializes the real and optionally complex parts
  using uniform random distributions.

  Example:
  
  .. code-block:: python
  
      key = jax.random.PRNGKey(42)
      params = unitary_matrix_param_init(key, (2, 2))
      sorted(params.keys())
      >>> ['w_im', 'w_re']
      
  Args:
      key (Array): JAX PRNG key for random number generation.
      shape (tuple or List[int]): Tuple of ints specifying the dimensions of the matrix.
      complex (bool): If True, initializes both real and imaginary components.If False, only initializes real components. Defaults to True.

  Returns:
      dict: Dictionary containing:
  
          - 'w_re': Real weights of shape `shape`
          - 'w_im': Imaginary weights of shape `shape` (if complex=True)


  """
  key_re, key_im = jax.random.split(key)
  weight_real = jax.random.uniform(key_re, shape)
  if complex:
    weight_imaginary = jax.random.uniform(key_im, shape)
  else:
    weight_imaginary = 0.
  return {'w_re': weight_real, 'w_im': weight_imaginary}
